package org.processmining.plugins.etm.experiments.bpm2013;

import java.io.File;
import java.util.ArrayList;

import org.deckfour.xes.classification.XEventClasses;
import org.deckfour.xes.classification.XEventNameClassifier;
import org.deckfour.xes.info.XLogInfo;
import org.deckfour.xes.info.XLogInfoFactory;
import org.deckfour.xes.model.XLog;
import org.processmining.plugins.etm.CentralRegistryConfigurable;
import org.processmining.plugins.etm.experiments.CommandLineInterface;
import org.processmining.plugins.etm.experiments.PaperMethods;
import org.processmining.plugins.etm.experiments.StandardLogs;
import org.processmining.plugins.etm.fitness.metrics.EditDistanceWrapperRTEDRelative;
import org.processmining.plugins.etm.model.narytree.Configuration;
import org.processmining.plugins.etm.model.narytree.NAryTree;
import org.processmining.plugins.etm.model.narytree.TreeUtils;
import org.processmining.plugins.etm.model.narytree.conversion.NAryTreeToProcessTree;
import org.processmining.plugins.etm.model.narytree.conversion.ProcessTreeToNAryTree;
import org.processmining.plugins.etm.parameters.ETMParam;
import org.processmining.plugins.etm.parameters.ETMParamConfigurable;
import org.processmining.plugins.etm.utils.LogUtils;
import org.processmining.plugins.ptmerge.ptmerge.PlugIn;
import org.processmining.processtree.ProcessTree;
import org.processmining.processtree.ptml.importing.PtmlImportTree;

/**
 * This class contains (utility) methods used by me during the creation of the
 * BPM2013 paper
 * "Mining Configurable Process Models from Collections of Event Logs". They are
 * provided without warranty and may or may not work for you.
 * 
 * @author jbuijs
 * 
 */
public class BPM2013PaperMethods {
	//LAPTOP
	//public static String bpmPaperFigureDir = "C:/Users/jbuijs.TUE/Documents/PhD/Projects/Papers/2013-03 BPM/paper/figures/";

	//DESKTOP
	public static String bpmPaperFigureDir = "C:/Users/jbuijs/Documents/PhD/Projects/Papers/2013-03 BPM/paper/figures/";

	public static void main(String[] args) {
		//		naryTreeToBPMNPng();
		//		folderProcessTreeToBPMNPngs("C:/Users/jbuijs/Documents/PhD/Projects/Papers/2013-03 BPM/data/2013-03-25_12_05/");
		//		treesToPNGs();
		//				mergePTsAndMakeLaTeX();
		sizeAndSimilarityStats();
		//		makeLatexNAryTree();
		//		applyBlockToRootXorChildren();
	}

	private static void makeLatexNAryTree() {
		//Code for GREEN trees with Fr x50

		//ArrayList<XLog> logsList = BPMTestLogs.loadCaseStudyLogs();
		//XLog[] logs = logsList.toArray(new XLog[logsList.size()]);

		//The original command line argument!
		String baseDirRunEx = "C:\\Users\\jbuijs\\Documents\\PhD\\Projects\\Papers\\2013-03 BPM\\data\\Running Example\\";
		String bpmRunExGreenFr = "GREEN, " + baseDirRunEx + ", log=" + baseDirRunEx + "/000RunEx-Default.xez, "
				+ "log=" + baseDirRunEx + "/000RunEx-Config2.xez, log=" + baseDirRunEx + "/000RunEx-Config3.xez, "
				+ "log=" + baseDirRunEx + "/000RunEx-Config4.xez, "
				+ "Fr=50, Pe=5, Sm=10, Gv=.1, maxGen=120000, popSize=20, eliteSize=6, configurationAlpha=0.0010";
		String baseDirCaseStudy = "C:\\Users\\jbuijs\\Documents\\PhD\\Projects\\Papers\\2013-03 BPM\\data\\CaseStudy_WABO_01_BB\\";
		String bpmCaseStudyGreen = "GREEN, " + baseDirCaseStudy + ", log=" + baseDirCaseStudy
				+ "\\WABO1_01_BB.xes.gz, " + "log=" + baseDirCaseStudy + "\\WABO2_01_BB.xes.gz, log="
				+ baseDirCaseStudy + "\\WABO3_01_BB.xes.gz, " + "log=" + baseDirCaseStudy + "\\WABO4_01_BB.xes.gz, "
				+ "log=" + baseDirCaseStudy + "\\WABO5_01_BB.xes.gz, "
				+ "Fr=10, Pe=5, Sm=10, Gv=.1, maxGen=120000, popSize=20, eliteSize=6, configurationAlpha=0.0010";
		String bpmCaseStudyGreenFr = "GREEN, " + baseDirCaseStudy + ", log=" + baseDirCaseStudy
				+ "\\WABO1_01_BB.xes.gz, " + "log=" + baseDirCaseStudy + "\\WABO2_01_BB.xes.gz, log="
				+ baseDirCaseStudy + "\\WABO3_01_BB.xes.gz, " + "log=" + baseDirCaseStudy + "\\WABO4_01_BB.xes.gz, "
				+ "log=" + baseDirCaseStudy + "\\WABO5_01_BB.xes.gz, "
				+ "Fr=50, Pe=5, Sm=10, Gv=.1, maxGen=120000, popSize=20, eliteSize=6, configurationAlpha=0.0010";

		String[] argument = bpmCaseStudyGreenFr.replace("\\s", "").split(",");

		CommandLineInterface cli = new CommandLineInterface(argument);

		ETMParamConfigurable etmParam = (ETMParamConfigurable) cli.buildETMParam(baseDirCaseStudy, cli.getLogs());

		cli.logSettings(true);

		CentralRegistryConfigurable registry = etmParam.getCentralRegistry();

		String tree = "OR( LEAF: tau , LOOP( LOOP( OR( LEAF: C+complete , SEQ( OR( LEAF: tau , OR( LEAF: tau , LOOP( OR( LEAF: tau , OR( LEAF: tau , LOOP( OR( LEAF: tau , LOOP( OR( LEAF: tau , LOOP( LEAF: B+complete , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) ) ) , LEAF: A+complete ) ) , LEAF: tau , OR( LEAF: tau , LOOP( XOR( OR( LEAF: C+complete , XOR( LEAF: A+complete , OR( LEAF: D2+complete , OR( LEAF: E+complete , OR( LEAF: tau , LOOP( OR( LEAF: tau , OR( LEAF: tau , OR( LEAF: tau , OR( LEAF: tau , OR( LEAF: tau , LOOP( OR( LEAF: tau , OR( LEAF: tau , OR( LEAF: tau , OR( LEAF: tau , LOOP( LEAF: D+complete , LEAF: tau , LEAF: tau ) ) ) ) ) , LEAF: tau , LEAF: tau ) ) ) ) ) ) , LEAF: tau , LEAF: tau ) ) ) ) ) ) , OR( LEAF: B1+complete , OR( LEAF: tau , XOR( LEAF: E+complete , LEAF: B+complete ) ) ) , LOOP( XOR( OR( LOOP( LEAF: B2+complete , LEAF: tau , LEAF: C+complete ) , LOOP( LEAF: G+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LEAF: F+complete , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) ) , LEAF: A+complete , LEAF: tau ) ) [[-, -, -, -, -, -, -, -, -, x, -, -, -, -, -, -, -, a, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, x, -, -, -, -, -, -, -, -, -, -, x, -, -, -, -, -, -, -, -, x, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, >, -, -, -, >, -, -, -, -, -, -, -, -, -][-, -, -, >, -, -, -, -, -, a, -, -, -, -, a, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, >, -, x, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -][-, -, -, >, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, a, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -][-, -, -, >, -, -, -, x, -, -, -, -, -, -, -, -, -, x, -, -, x, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -] ]  0.9903 (Pe: 0.8931 Sm: 0.9974 Fr: 1.0000 Gv: 0.3632 Cf: 0.8654 Of: 0.9904 )";
		//String treeCaseStudy = "LOOP( XOR( LOOP( LEAF: 01_BB_630+complete , LOOP( XOR( LOOP( LEAF: 01_BB_680+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_780_2+complete , LEAF: 01_BB_780_1+complete , LOOP( XOR( LEAF: 01_BB_790+complete , LEAF: 01_BB_670+complete , LEAF: 01_BB_780_3+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_650_2+complete , LEAF: 01_BB_640+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) , LEAF: tau ) , LOOP( XOR( LOOP( XOR( LOOP( LEAF: 01_BB_630+complete , LEAF: tau , LEAF: tau ) , LOOP( XOR( LOOP( LEAF: 01_BB_755+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_730+complete , LEAF: tau , LEAF: tau ) , LOOP( XOR( LEAF: 01_BB_610+complete , OR( LEAF: 01_BB_760+complete , LEAF: tau ) , LEAF: 01_BB_775+complete , OR( LOOP( LEAF: 01_BB_700+complete , LEAF: tau , LEAF: tau ) , LEAF: tau ) , OR( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_2+complete ) , LOOP( XOR( LEAF: 01_BB_740+complete , LEAF: 01_BB_766+complete , LEAF: 01_BB_550+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_770+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_540+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LOOP( XOR( LEAF: tau , LOOP( LEAF: 01_BB_770+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LEAF: 01_BB_765+complete , LEAF: tau , LEAF: tau ) , LEAF: tau ) ) [[-, -, B, -, >, -, -, -, -, -, -, -, H, -, -, -, -, B, -, -, -, -, -, -, -, >, -, >, -, -, -, B, -, -, -, >, -, -, -, >, -, -, -, >, -, B, >, -, -, B, B, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, B, -, -, -, -, H, -, -, -, -, -, B, -, -, -, B, -, -][>, -, >, -, -, -, -, -, -, -, -, B, >, -, B, -, B, B, B, -, -, -, -, -, -, -, -, >, -, -, -, B, -, >, -, >, -, -, -, -, -, B, -, -, -, B, B, -, -, -, B, -, -, -, -, -, -, B, B, -, B, -, -, B, B, -, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, >, -, -, -, -][>, -, >, -, >, -, -, -, -, -, -, B, -, -, B, -, B, -, -, -, -, -, -, -, -, -, -, >, -, -, -, B, -, >, -, -, -, -, -, >, -, -, -, B, -, B, <, -, -, H, -, -, -, -, -, -, -, H, -, -, B, -, -, B, H, -, B, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, B, -, -][-, -, -, -, B, -, -, -, -, -, -, B, >, -, B, -, B, -, B, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, B, -, -, -, B, B, -, -, B, B, -, -, -, -, -, -, B, B, -, B, -, -, B, B, -, B, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, B, -, -][-, -, >, -, -, -, -, -, -, -, -, -, >, -, -, -, -, B, B, -, -, -, -, -, -, >, -, -, -, -, -, B, -, >, -, >, -, -, -, >, -, -, -, >, -, -, a, -, -, -, <, -, -, -, -, -, -, -, B, -, B, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, B, -, -] ]  0.9885 (Pe: 0.8693 Of: 0.9889 Cf: 0.6354 Fr: 0.9997 Gv: 0.4676 Sm: 0.9996 )";
		String treeCaseStudyBlue = "XOR( XOR( LOOP( LEAF: tau , LEAF: 590+complete , LOOP( XOR( LEAF: 670+complete , LEAF: 650\\_1+complete , LEAF: 670+complete ) , LEAF: tau , LEAF: tau ) ) , XOR( OR( SEQ( LEAF: 740+complete , SEQ( LEAF: 590+complete , LEAF: 650\\_1+complete ) , OR( LEAF: 670+complete , LEAF: 730+complete ) ) , LOOP( LEAF: 590+complete , LEAF: 700+complete , LEAF: tau ) ) , LEAF: 590+complete , OR( LEAF: 540+complete , XOR( OR( LEAF: 740+complete , LEAF: 700+complete ) , LOOP( LOOP( LEAF: tau , XOR( LOOP( LEAF: 540+complete , LEAF: tau , LEAF: tau ) , AND( LEAF: 540+complete , LEAF: 610+complete ) , XOR( SEQ( LEAF: 546+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 590+complete , LEAF: 550\\_1+complete , XOR( LEAF: 550\\_2+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete ) , LEAF: 560+complete ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , LEAF: 630+complete , LEAF: 640+complete , XOR( LEAF: 670+complete , LEAF: 650\\_1+complete , LEAF: 670+complete ) , LEAF: 650\\_1+complete ) , LEAF: 650\\_2+complete , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 760+complete , LEAF: tau ) ) , SEQ( LOOP( LEAF: 546+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 550+complete , LEAF: tau , LEAF: tau ) , LEAF: 550\\_1+complete , LOOP( LEAF: tau , LEAF: tau , LEAF: 550\\_2+complete ) ) , AND( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 610+complete ) , LEAF: 600+complete , XOR( LOOP( SEQ( LEAF: 540+complete , LEAF: 600+complete , XOR( SEQ( LEAF: 546+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 590+complete , LEAF: 550\\_1+complete , XOR( LEAF: 550\\_2+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete ) , LEAF: 560+complete ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , LEAF: 630+complete , LEAF: 640+complete , XOR( LEAF: 670+complete , LEAF: 650\\_1+complete , LEAF: 670+complete ) , LEAF: 650\\_1+complete ) , LEAF: 650\\_2+complete , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 610+complete , LEAF: 630+complete ) ) , LEAF: tau ) , AND( LEAF: 550\\_1+complete , OR( LEAF: 546+complete , LOOP( LOOP( LEAF: 550+complete , LEAF: 590+complete , LEAF: tau ) , LOOP( LOOP( XOR( LEAF: 550+complete , XOR( LEAF: 550\\_2+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete ) , LEAF: 560+complete ) , LEAF: 770+complete ) , LEAF: tau , LEAF: tau ) , SEQ( LEAF: 740+complete , LEAF: 766+complete ) , LEAF: tau ) , LEAF: tau ) ) ) , LEAF: 740+complete ) ) ) ) ) , AND( LEAF: 680+complete , XOR( SEQ( LEAF: 540+complete , LEAF: 600+complete , XOR( SEQ( LEAF: 546+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 590+complete , LEAF: 550\\_1+complete , XOR( LEAF: 550\\_2+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete ) , LEAF: 560+complete ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , LEAF: 630+complete , LEAF: 640+complete , XOR( LEAF: 670+complete , LEAF: 650\\_1+complete , LEAF: 670+complete ) , LEAF: 650\\_1+complete ) , LEAF: 650\\_2+complete , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 760+complete , LEAF: tau ) ) ) , LEAF: 540+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) ) ) , XOR( LEAF: 550+complete , XOR( LEAF: 550\\_2+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete ) , LEAF: 560+complete ) , LEAF: 770+complete ) , XOR( LOOP( LEAF: 540+complete , LEAF: tau , LEAF: tau ) , AND( LEAF: 540+complete , LEAF: 610+complete ) , XOR( SEQ( LEAF: 546+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 590+complete , LEAF: 550\\_1+complete , XOR( LEAF: 550\\_2+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete ) , LEAF: 560+complete ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , LEAF: 630+complete , LEAF: 640+complete , XOR( LEAF: 670+complete , LEAF: 650\\_1+complete , LEAF: 670+complete ) , LEAF: 650\\_1+complete ) , LEAF: 650\\_2+complete , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 760+complete , LEAF: tau ) ) , SEQ( LOOP( LEAF: 546+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 550+complete , LEAF: tau , LEAF: tau ) , LEAF: 550\\_1+complete , LOOP( LEAF: tau , LEAF: tau , LEAF: 550\\_2+complete ) ) , AND( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 610+complete ) , LEAF: 600+complete , XOR( LOOP( SEQ( LEAF: 540+complete , LEAF: 600+complete , XOR( SEQ( LEAF: 546+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 590+complete , LEAF: 550\\_1+complete , XOR( LEAF: 550\\_2+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete ) , LEAF: 560+complete ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , LEAF: 630+complete , LEAF: 640+complete , XOR( LEAF: 670+complete , LEAF: 650\\_1+complete , LEAF: 670+complete ) , LEAF: 650\\_1+complete ) , LEAF: 650\\_2+complete , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 610+complete , LEAF: 630+complete ) ) , OR( XOR( LOOP( SEQ( LEAF: 540+complete , LEAF: 600+complete , XOR( SEQ( LEAF: 546+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 590+complete , LEAF: 550\\_1+complete , XOR( LEAF: 550\\_2+complete , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete ) , LEAF: 560+complete ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , LEAF: 630+complete , LEAF: 640+complete , XOR( LEAF: 670+complete , LEAF: 650\\_1+complete , LEAF: 670+complete ) , LEAF: 650\\_1+complete ) , LEAF: 650\\_2+complete , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 610+complete , LEAF: 630+complete ) , OR( LEAF: 540+complete , XOR( SEQ( LEAF: 546+complete , LEAF: 560+complete , XOR( LEAF: 610+complete , LOOP( LEAF: tau , XOR( LEAF: 546+complete , LEAF: 590+complete , LEAF: 600+complete , LEAF: 650\\_2+complete , SEQ( LEAF: 600+complete , LEAF: 610+complete , SEQ( LEAF: 540+complete , LEAF: 600+complete ) ) , SEQ( LEAF: 600+complete , LEAF: 546+complete , LEAF: 610+complete ) , SEQ( LEAF: 550+complete , LEAF: 546+complete , LEAF: 546+complete , LEAF: 550\\_1+complete , LEAF: 560+complete , XOR( LEAF: 630+complete , LEAF: tau , LOOP( LEAF: 610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 680+complete , LEAF: 755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 650\\_1+complete ) , LEAF: 765+complete ) , LEAF: tau ) ) ) , LEAF: 640+complete ) , LEAF: 650\\_1+complete , LEAF: 550\\_2+complete
		String treeCaseStudyGreenFr = "LOOP( XOR( LOOP( LEAF: 01_BB_630+complete , LOOP( XOR( LOOP( LEAF: 01_BB_680+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_780_2+complete , LEAF: 01_BB_780_1+complete , LOOP( XOR( LEAF: 01_BB_790+complete , LEAF: 01_BB_670+complete , LEAF: 01_BB_780_3+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_650_2+complete , LEAF: 01_BB_640+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) , LEAF: tau ) , LOOP( XOR( LOOP( XOR( LOOP( LEAF: 01_BB_630+complete , LEAF: tau , LEAF: tau ) , LOOP( XOR( LOOP( LEAF: 01_BB_755+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_730+complete , LEAF: tau , LEAF: tau ) , LOOP( XOR( LEAF: 01_BB_610+complete , OR( LEAF: 01_BB_760+complete , LEAF: tau ) , LEAF: 01_BB_775+complete , OR( LOOP( LEAF: 01_BB_700+complete , LEAF: tau , LEAF: tau ) , LEAF: tau ) , OR( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_2+complete ) , LOOP( XOR( LEAF: 01_BB_740+complete , LEAF: 01_BB_766+complete , LEAF: 01_BB_550+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_770+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_540+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LOOP( XOR( LEAF: tau , LOOP( LEAF: 01_BB_770+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LEAF: 01_BB_765+complete , LEAF: tau , LEAF: tau ) , LEAF: tau ) ) [[-, -, B, -, >, -, -, -, -, -, -, -, H, -, -, -, -, B, -, -, -, -, -, -, -, >, -, >, -, -, -, B, -, -, -, >, -, -, -, >, -, -, -, >, -, B, >, -, -, B, B, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, B, -, -, -, -, H, -, -, -, -, -, B, -, -, -, B, -, -][>, -, >, -, -, -, -, -, -, -, -, B, >, -, B, -, B, B, B, -, -, -, -, -, -, -, -, >, -, -, -, B, -, >, -, >, -, -, -, -, -, B, -, -, -, B, B, -, -, -, B, -, -, -, -, -, -, B, B, -, B, -, -, B, B, -, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, >, -, -, -, -][>, -, >, -, >, -, -, -, -, -, -, B, -, -, B, -, B, -, -, -, -, -, -, -, -, -, -, >, -, -, -, B, -, >, -, -, -, -, -, >, -, -, -, B, -, B, <, -, -, H, -, -, -, -, -, -, -, H, -, -, B, -, -, B, H, -, B, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, B, -, -][-, -, -, -, B, -, -, -, -, -, -, B, >, -, B, -, B, -, B, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, B, -, -, -, B, B, -, -, B, B, -, -, -, -, -, -, B, B, -, B, -, -, B, B, -, B, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, B, -, -][-, -, >, -, -, -, -, -, -, -, -, -, >, -, -, -, -, B, B, -, -, -, -, -, -, >, -, -, -, -, -, B, -, >, -, >, -, -, -, >, -, -, -, >, -, -, a, -, -, -, <, -, -, -, -, -, -, -, B, -, B, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, B, -, -] ]  0.9885 (Pe: 0.8693 Of: 0.9889 Cf: 0.6354 Fr: 0.9997 Gv: 0.4676 Sm: 0.9996 )";

		NAryTree result = TreeUtils.fromString(treeCaseStudyGreenFr, registry.getEventClasses());

		//Now evaluate
		etmParam.getFitnessEvaluator().getFitness(result, null);

		CommandLineInterface.outputTree(baseDirRunEx, "GREENFR_custom", result, registry);
	}

	public static void treesToPNGs() {
		bpmPaperFigureDir = "C:/Users/jbuijs/Documents/PhD/Projects/Papers/2013-03 BPM/data/2013-03-25_12_05/";
		XLog[] logs = new XLog[] { /*-*/StandardLogs.createMergedLog(),/**/StandardLogs.createDefaultLog(),
				StandardLogs.createConfig2(), StandardLogs.createConfig3(), StandardLogs.createConfig4() };

		XLogInfo infoMerged = XLogInfoFactory.createLogInfo(StandardLogs.createMergedLog());

		//And the trees for each of the logs

		//BLUE 2013-03-25_12_05 session 5
		/*-
		String[] trees = new String[] {
				"SEQ( SEQ( SEQ( LEAF: A+complete , AND( AND( LEAF: B+complete , LEAF: C+complete ) , LEAF: D+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) , LEAF: G+complete )",
				"REVSEQ( LEAF: G+complete , REVSEQ( REVSEQ( XOR( LEAF: F+complete , LEAF: E+complete ) , REVSEQ( LEAF: D2+complete , REVSEQ( REVSEQ( LEAF: C+complete , LEAF: B2+complete ) , LEAF: B1+complete ) ) ) , LEAF: A+complete ) )",
				"REVSEQ( SEQ( LEAF: B+complete , XOR( LEAF: E+complete , LEAF: F+complete ) ) , REVSEQ( LEAF: C+complete , LEAF: A+complete ) )",
				"SEQ( LEAF: A+complete , LEAF: B1+complete , XOR( SEQ( SEQ( LEAF: D2+complete , LEAF: B2+complete ) , LEAF: C+complete , LEAF: F+complete ) , SEQ( LEAF: D+complete , LEAF: B2+complete , LEAF: C+complete , LEAF: E+complete ) ) )" };
				/**/

		//RED 2013-03-25 12:05 session 18
		String[] trees = new String[] {
				"SEQ( LEAF: A+complete , LEAF: B1+complete , AND( LEAF: B2+complete , LEAF: C+complete , XOR( LEAF: D2+complete , LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) [ ] 0.9406 (Pe: 0.9714 Sm: 1.0000 Gv: 0.9399 Fr: 0.8659 Of: 0.9406 )",
				"SEQ( SEQ( LEAF: A+complete , AND( LEAF: C+complete , LEAF: D+complete , LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) [ ] 0.9999 (Pe: 0.9960 Sm: 1.0000 Gv: 0.8872 Fr: 0.9952 Of: 0.9999 Er: 1.0000 )",
				"SEQ( SEQ( SEQ( LEAF: A+complete , LEAF: B1+complete ) , LEAF: B2+complete , LEAF: C+complete ) , LEAF: D2+complete , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) [ ] 1.0000 (Pe: 1.0000 Sm: 1.0000 Gv: 0.8700 Fr: 1.0000 Of: 1.0000 Er: 1.0000 )",
				"SEQ( LEAF: A+complete , SEQ( LEAF: C+complete , XOR( LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) [ ] 0.9994 (Pe: 1.0000 Sm: 0.9444 Gv: 0.8192 Fr: 1.0000 Of: 0.9994 Er: 1.0000 )",
				"SEQ( LEAF: A+complete , LEAF: B1+complete , LEAF: D+complete , AND( SEQ( LEAF: B2+complete , LEAF: C+complete ) , LEAF: D2+complete ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) [ ] 0.9990 (Pe: 0.8889 Sm: 1.0000 Gv: 0.8886 Fr: 0.9545 Of: 0.9990 Er: 1.0000 )" };

		NAryTree[] treesNAT = new NAryTree[trees.length];
		ProcessTree[] treesPT = new ProcessTree[trees.length];

		for (int i = 0; i < logs.length; i++) {
			XLog log = logs[i];
			String tree = trees[i];

			XLogInfo info = XLogInfoFactory.createLogInfo(log);

			NAryTree treeInstance = TreeUtils.fromString(tree, info.getEventClasses());
			treeInstance = TreeUtils.rewriteRevSeq(treeInstance);
			treesNAT[i] = treeInstance;

			CommandLineInterface cli = new CommandLineInterface(new String[]{"RED Log="});
			ETMParam param = cli.buildETMParam(null, new XLog[] { log });
			param.getFitnessEvaluator().getFitness(treeInstance, null);

			ProcessTree pt = NAryTreeToProcessTree.convert(treeInstance, info.getEventClasses());
			CommandLineInterface.treeToBPMN(pt, new File(bpmPaperFigureDir + "000" + i + "BPMN.png"));
			treesPT[i] = pt;
		}

		//Create the LATEX for the merged tree
		ProcessTree merged = PlugIn.mergeDAGSActMap(null, treesPT[0], treesPT[1], treesPT[2], treesPT[3]);

		ProcessTreeToNAryTree converter = new ProcessTreeToNAryTree(infoMerged.getEventClasses());
		NAryTree mergedNat = converter.convert(merged);

		//We need to output the tree and 'sort' it, then call this method again to read it in, add blocking of XOR root children and then evaluate and TeXiFy
		System.out.println("Merged NAT: " + TreeUtils.toString(mergedNat, infoMerged.getEventClasses()));

		NAryTree correctedMergedNat = TreeUtils
				.fromString(
						//Approach 1 2013-3-25 12.05 
						//"XOR( SEQ( SEQ( SEQ( LEAF: A+complete , AND( AND( LEAF: B+complete , LEAF: C+complete ) , LEAF: D+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) , LEAF: G+complete ) , SEQ( SEQ( LEAF: A+complete , SEQ( SEQ( SEQ( LEAF: B1+complete , SEQ( LEAF: B2+complete , LEAF: C+complete ) ) , LEAF: D2+complete ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) ) , LEAF: G+complete ) , SEQ( SEQ( LEAF: A+complete , LEAF: C+complete ) , SEQ( LEAF: B+complete , XOR( LEAF: E+complete , LEAF: F+complete ) ) ) , SEQ( LEAF: A+complete , LEAF: B1+complete , XOR( SEQ( SEQ( LEAF: D2+complete , LEAF: B2+complete ) , LEAF: C+complete , LEAF: F+complete ) , SEQ( LEAF: D+complete , LEAF: B2+complete , LEAF: C+complete , LEAF: E+complete ) ) ) )",
						//Approach 2 2013-3-25 12.05 
						"XOR( SEQ( SEQ( LEAF: A+complete , AND( LEAF: C+complete , LEAF: D+complete , LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( SEQ( SEQ( LEAF: A+complete , LEAF: B1+complete ) , LEAF: B2+complete , LEAF: C+complete ) , LEAF: D2+complete , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( LEAF: A+complete , SEQ( LEAF: C+complete , XOR( LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) , SEQ( LEAF: A+complete , LEAF: B1+complete , AND( LEAF: B2+complete , LEAF: C+complete , XOR( LEAF: D2+complete , LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) ) [ ]",
						infoMerged.getEventClasses());

		//Add configurations, assuming XOR of each of the 4 input trees... e.g. hiding all the other in a certain configuration
		correctedMergedNat.addConfiguration(new Configuration(correctedMergedNat.size()));
		correctedMergedNat.addConfiguration(new Configuration(correctedMergedNat.size()));
		correctedMergedNat.addConfiguration(new Configuration(correctedMergedNat.size()));
		correctedMergedNat.addConfiguration(new Configuration(correctedMergedNat.size()));

		for (int c = 0; c < correctedMergedNat.nChildren(0); c++) {
			int index = correctedMergedNat.getChildAtIndex(0, c);

			for (int config = 0; config < 4; config++) {
				if (config != c) {
					correctedMergedNat.setNodeConfiguration(config, index, Configuration.BLOCKED);
				}
			}
		}

		//Create LaTeX for merged NAT
		System.out.println("NAT: " + TreeUtils.toString(correctedMergedNat, converter.getEventClasses()));
		System.out.println("NATlatex: " + PaperMethods.naryTreeToLatex(correctedMergedNat, converter.getEventClasses()));

		System.exit(0);
	}

	public static void naryTreeToBPMNPng() {
		//CommandLineInterface cli = new CommandLineInterface();

		//XLog[] logs = new XLog[] { BPMTestLogs.createDefaultLog() };
		//		XLog[] logs = new XLog[] { BPMTestLogs.createConfig2() };
		//		XLog[] logs = new XLog[] { BPMTestLogs.createConfig3() };
		//		XLog[] logs = new XLog[] { BPMTestLogs.createConfig4() };
		XLog[] logs = new XLog[] { StandardLogs.createDefaultLog(), StandardLogs.createConfig2(),
				StandardLogs.createConfig3(), StandardLogs.createConfig4() };

		/*-* /
		//2013-03-22 10:25 
		//RED session 12
		String redMstar = "SEQ( LEAF: A+complete , LOOP( LEAF: tau , SEQ( LEAF: C+complete , LEAF: B+complete ) , LEAF: tau ) , XOR( LEAF: tau , LEAF: B+complete , OR( LEAF: D+complete , LEAF: B1+complete ) , AND( LEAF: B+complete , LEAF: D+complete ) ) , LEAF: B2+complete , LEAF: C+complete , XOR( SEQ( OR( LEAF: tau ) , XOR( LEAF: D2+complete , LEAF: D+complete ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( LEAF: B+complete , XOR( LEAF: F+complete , LEAF: E+complete ) ) ) ) [ ] 0.9419 (Sm: 0.9753 Pe: 0.9649 Gv: 0.8342 Of: 0.9419 Fr: 0.9281 )";
		String redm0 = "SEQ( LEAF: A+complete , LOOP( LEAF: tau , SEQ( LEAF: C+complete , LEAF: B+complete ) , LEAF: tau ) , XOR( LEAF: tau , LEAF: B+complete , OR( LEAF: D+complete , LEAF: C+complete ) , AND( LEAF: B+complete , LEAF: D+complete ) ) , LEAF: C+complete , XOR( SEQ( OR( LEAF: tau ) , XOR( LEAF: D+complete ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( LEAF: B+complete , SEQ( LEAF: F+complete , LEAF: G+complete ) ) ) ) [ ] 0.9996 (Sm: 0.9527 Er: 1.0000 Pe: 0.9834 Gv: 0.6757 Of: 0.9996 Fr: 0.9737 )";
		String redm1 = "SEQ( LEAF: A+complete , LOOP( LEAF: tau , SEQ( LEAF: C+complete , LEAF: B+complete ) , LEAF: tau ) , XOR( OR( LEAF: B1+complete ) , AND( LEAF: B+complete , LEAF: D+complete ) ) , LEAF: B2+complete , LEAF: C+complete , XOR( SEQ( OR( LEAF: tau ) , XOR( LEAF: D2+complete ) , XOR( SEQ( LEAF: F+complete ) , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( LEAF: B+complete , XOR( LEAF: F+complete , LEAF: E+complete ) ) ) ) [ ] 0.9990 (Sm: 0.9304 Er: 1.0000 Pe: 0.8235 Gv: 0.4638 Of: 0.9990 Fr: 1.0000 )";
		String redm2 = "SEQ( LEAF: A+complete , LOOP( LEAF: tau , SEQ( LEAF: C+complete , LEAF: B+complete ) , OR( LEAF: tau ) ) , XOR( OR( LEAF: tau ) , SEQ( LEAF: B+complete , OR( LEAF: D+complete , LEAF: B1+complete ) , AND( LEAF: B+complete , LEAF: D+complete ) ) ) , LEAF: C+complete , XOR( SEQ( OR( LEAF: tau ) , XOR( LEAF: D2+complete , LEAF: D+complete ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( LEAF: B+complete , XOR( SEQ( LEAF: F+complete ) , LEAF: E+complete ) ) ) ) [ ] 0.9989 (Sm: 0.9368 Er: 1.0000 Pe: 0.8000 Gv: 0.3407 Of: 0.9989 Fr: 1.0000 )";
		String redm3 = "SEQ( LEAF: A+complete , LOOP( LEAF: tau , SEQ( LEAF: C+complete , LEAF: B+complete ) , LEAF: tau ) , SEQ( LEAF: tau , LEAF: tau , OR( LEAF: D2+complete , LEAF: B1+complete ) , AND( LEAF: D+complete ) ) , LEAF: B2+complete , LEAF: C+complete , XOR( SEQ( OR( LEAF: tau ) , XOR( LEAF: D2+complete , LEAF: D+complete ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( LEAF: tau , XOR( LEAF: F+complete , LEAF: E+complete ) ) ) ) [ ] 0.9986 (Sm: 0.9198 Er: 1.0000 Pe: 0.7986 Gv: 0.4463 Of: 0.9986 Fr: 0.9728 )";
		String redConfigurable = "P.H.( Seq( A+complete , XorLoop( tau , Seq( C+complete , C+complete , B+complete , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , B+complete ) , tau ) , Xor( tau , B+complete , Or( D+complete , C+complete ) , And( B+complete , D+complete , D+complete , D+complete ) , Or( B1+complete , D+complete , D2+complete ) ) , C+complete , Seq( B+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , tau , tau , Or( B1+complete , D+complete , D2+complete ) , And( B+complete , D+complete , D+complete , D+complete ) ) , B2+complete , C+complete , Xor( Seq( Or( tau ) , Xor( D+complete ) , Xor( D2+complete , D+complete ) , tau , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , G+complete , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Seq( B+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , tau , tau , Or( B1+complete , D+complete , D2+complete ) , And( B+complete , D+complete , D+complete , D+complete ) ) , Or( tau ) ) , B+complete , Xor( Seq( Or( tau ) , Xor( D+complete ) , Xor( D2+complete , D+complete ) , tau , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , G+complete , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Seq( C+complete , C+complete , B+complete , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , B+complete ) , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) ) ) , Seq( A+complete , XorLoop( tau , Seq( A+complete , XorLoop( tau , Seq( C+complete , C+complete , B+complete , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , B+complete ) , tau ) , Xor( tau , B+complete , Or( D+complete , C+complete ) , And( B+complete , D+complete , D+complete , D+complete ) , Or( B1+complete , D+complete , D2+complete ) ) , C+complete , Seq( B+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , tau , tau , Or( B1+complete , D+complete , D2+complete ) , And( B+complete , D+complete , D+complete , D+complete ) ) , B2+complete , C+complete , Xor( Seq( Or( tau ) , Xor( D+complete ) , Xor( D2+complete , D+complete ) , tau , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , G+complete , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Seq( B+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , tau , tau , Or( B1+complete , D+complete , D2+complete ) , And( B+complete , D+complete , D+complete , D+complete ) ) , Or( tau ) ) , B+complete , Xor( Seq( Or( tau ) , Xor( D+complete ) , Xor( D2+complete , D+complete ) , tau , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , G+complete , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Seq( C+complete , C+complete , B+complete , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , B+complete ) , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) ) ) , Or( tau ) ) , Xor( Seq( Or( tau ) , Xor( D+complete ) , Xor( D2+complete , D+complete ) , tau , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , G+complete , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Seq( B+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , tau , tau , Or( B1+complete , D+complete , D2+complete ) , And( B+complete , D+complete , D+complete , D+complete ) ) , Or( tau ) ) , C+complete , Xor( Seq( Or( tau ) , Xor( D+complete ) , Xor( D2+complete , D+complete ) , tau , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , G+complete , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Seq( C+complete , C+complete , B+complete , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , B+complete ) , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) ) ) , Seq( A+complete , XorLoop( tau , Seq( C+complete , C+complete , B+complete , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , B+complete ) , tau ) , Xor( tau , B+complete , Or( D+complete , C+complete ) , And( B+complete , D+complete , D+complete , D+complete ) , Or( B1+complete , D+complete , D2+complete ) ) , C+complete , Seq( B+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , tau , tau , Or( B1+complete , D+complete , D2+complete ) , And( B+complete , D+complete , D+complete , D+complete ) ) , B2+complete , C+complete , Xor( Seq( Or( tau ) , Xor( D+complete ) , Xor( D2+complete , D+complete ) , tau , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , G+complete , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Seq( B+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , tau , tau , Or( B1+complete , D+complete , D2+complete ) , And( B+complete , D+complete , D+complete , D+complete ) ) , Or( tau ) ) , B+complete , Xor( Seq( Or( tau ) , Xor( D+complete ) , Xor( D2+complete , D+complete ) , tau , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , G+complete , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , Seq( C+complete , C+complete , B+complete , Xor( F+complete , E+complete , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) , E+complete ) , B+complete ) , Seq( F+complete , Or( tau ) , Xor( D2+complete , D+complete ) , Xor( F+complete , E+complete , E+complete , F+complete ) , G+complete ) ) ) )";
		/**/
		/*-*/
		//2013-03-25 12:05
		String bluem0 = "SEQ( SEQ( SEQ( LEAF: A , AND( AND( LEAF: B , LEAF: C ) , LEAF: D ) ) , XOR( LEAF: F , LEAF: E ) ) , LEAF: G ) ";
		String bluem1 = "REVSEQ( LEAF: G , REVSEQ( REVSEQ( XOR( LEAF: F , LEAF: E ) , REVSEQ( LEAF: D2 , REVSEQ( REVSEQ( LEAF: C , LEAF: B2 ) , LEAF: B1 ) ) ) , LEAF: A ) ) [ ] 0.9995 (Pe: 1.0000 Of: 0.9995 Sm: 1.0000 Gv: 0.8721 Fr: 1.0000 )";
		String bluem2 = "REVSEQ( SEQ( LEAF: B , XOR( LEAF: E , LEAF: F ) ) , REVSEQ( LEAF: C , LEAF: A ) ) [ ] 0.9997 (Pe: 1.0000 Of: 0.9997 Sm: 1.0000 Gv: 0.9224 Fr: 1.0000 )";
		String bluem3 = "SEQ( LEAF: A , LEAF: B1 , XOR( SEQ( SEQ( LEAF: D2 , LEAF: B2 ) , LEAF: C , LEAF: F ) , SEQ( LEAF: D , LEAF: B2 , LEAF: C , LEAF: E ) ) ) [ ] 0.9962 (Pe: 1.0000 Of: 0.9962 Sm: 0.9917 Gv: 0.8726 Fr: 1.0000 )";

		String redmstar = "SEQ( LEAF: A , LEAF: B1 , AND( LEAF: B2 , LEAF: C , XOR( LEAF: D2 , LEAF: B ) ) , XOR( LEAF: F , LEAF: E ) , LEAF: G ) [ ] 0.9406 (Pe: 0.9714 Sm: 1.0000 Gv: 0.9399 Fr: 0.8659 Of: 0.9406 )";
		String redm0 = "SEQ( SEQ( LEAF: A , AND( LEAF: C , LEAF: D , LEAF: B ) ) , XOR( LEAF: F , LEAF: E ) , LEAF: G ) [ ] 0.9999 (Pe: 0.9960 Sm: 1.0000 Gv: 0.8872 Fr: 0.9952 Of: 0.9999 Er: 1.0000 )";
		String redm1 = "SEQ( SEQ( SEQ( LEAF: A , LEAF: B1 ) , LEAF: B2 , LEAF: C ) , LEAF: D2 , XOR( LEAF: F , LEAF: E ) , LEAF: G ) [ ] 1.0000 (Pe: 1.0000 Sm: 1.0000 Gv: 0.8700 Fr: 1.0000 Of: 1.0000 Er: 1.0000 )";
		String redm2 = "SEQ( LEAF: A , SEQ( LEAF: C , XOR( LEAF: B ) ) , XOR( LEAF: F , LEAF: E ) ) [ ] 0.9994 (Pe: 1.0000 Sm: 0.9444 Gv: 0.8192 Fr: 1.0000 Of: 0.9994 Er: 1.0000 )";
		String redm3 = "SEQ( LEAF: A , LEAF: B1 , LEAF: D , AND( SEQ( LEAF: B2 , LEAF: C ) , LEAF: D2 ) , XOR( LEAF: F , LEAF: E ) ) [ ] 0.9990 (Pe: 0.8889 Sm: 1.0000 Gv: 0.8886 Fr: 0.9545 Of: 0.9990 Er: 1.0000 )";

		XLog merged = LogUtils.mergeLogs(logs);
		XLogInfo logInfo = XLogInfoFactory.createLogInfo(merged, new XEventNameClassifier());

		NAryTree tree = TreeUtils.fromString(redm3, logInfo.getEventClasses());
		tree = TreeUtils.rewriteRevSeq(tree);

		ProcessTree pt = NAryTreeToProcessTree.convert(tree, logInfo.getEventClasses());
		CommandLineInterface.treeToBPMN(pt, new File(bpmPaperFigureDir + "000BPMN.png"));

		System.out.println("DONE");
	}

	@Deprecated
	public static void mergePTsAndMakeLaTeX() {
		/*
		 * FIXME PT files have wrong activity label/reference!!!! Work from NAT
		 * strings from console files!! DONT USE THIS METHOD
		 */

		File dir = new File("C:/Users/jbuijs/Documents/PhD/Projects/Papers/2013-03 BPM/data/2013-03-25_12_05/");
		final String extension = ".ptml";

		ArrayList<ProcessTree> trees = new ArrayList<ProcessTree>();

		PtmlImportTree importer = new PtmlImportTree();
		if (dir.exists() && dir.isDirectory()) {
			for (File file : dir.listFiles()) {
				if (file.getName().endsWith(extension)) {
					try {
						ProcessTree pt = (ProcessTree) importer.importFile(null, file);
						trees.add(pt);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}
		}

		//Now merge
		//Assuming dir contains 5 ptml files first the wrongly merged and then pt0-pt3
		ProcessTree merged = PlugIn.mergeDAGSActMap(null, trees.get(1), trees.get(2), trees.get(3), trees.get(4));

		XLogInfo info = XLogInfoFactory.createLogInfo(LogUtils.mergeLogs(StandardLogs.createDefaultLog(),
				StandardLogs.createConfig2(), StandardLogs.createConfig3(), StandardLogs.createConfig4()));

		ProcessTreeToNAryTree converter = new ProcessTreeToNAryTree(info.getEventClasses());
		NAryTree mergedNat = converter.convert(merged);

		//Add configurations, assuming XOR of each of the 4 input trees... e.g. hiding all the other in a certain configuration
		mergedNat.addConfiguration(new Configuration(mergedNat.size()));
		mergedNat.addConfiguration(new Configuration(mergedNat.size()));
		mergedNat.addConfiguration(new Configuration(mergedNat.size()));
		mergedNat.addConfiguration(new Configuration(mergedNat.size()));

		for (int c = 0; c < mergedNat.nChildren(0); c++) {
			int index = mergedNat.getChildAtIndex(0, c);

			for (int config = 0; config < 4; config++) {
				if (config != c) {
					mergedNat.setNodeConfiguration(config, index, Configuration.BLOCKED);
				}
			}
		}

		System.out.println("NAT: " + TreeUtils.toString(mergedNat, converter.getEventClasses()));
		System.out.println("NATlatex: " + PaperMethods.naryTreeToLatex(mergedNat, converter.getEventClasses()));

		//And create LaTeX
		String latex = PaperMethods.processTreeToLatex(merged);
		System.out.println(latex);
	}

	public static void sizeAndSimilarityStats() {
		/*
		 * Create the numbers needed for the size and similarity (of individual
		 * model with configurable model) stats for BPM paper
		 */
		//XLog mergedLog = BPMTestLogs.createMergedLog();

		//Case study:
		ArrayList<XLog> logs = BPMsmallFunctions.loadCaseStudyLogs();
		XLog mergedLog = LogUtils.mergeLogs(logs.toArray(new XLog[logs.size()]));

		XLogInfo mergedLogInfo = XLogInfoFactory.createLogInfo(mergedLog);

		String app1 = "XOR( SEQ( SEQ( SEQ( LEAF: A+complete , AND( AND( LEAF: B+complete , LEAF: C+complete ) , LEAF: D+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) , LEAF: G+complete ) , SEQ( SEQ( LEAF: A+complete , SEQ( SEQ( SEQ( LEAF: B1+complete , SEQ( LEAF: B2+complete , LEAF: C+complete ) ) , LEAF: D2+complete ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) ) , LEAF: G+complete ) , SEQ( SEQ( LEAF: A+complete , LEAF: C+complete ) , SEQ( LEAF: B+complete , XOR( LEAF: E+complete , LEAF: F+complete ) ) ) , SEQ( LEAF: A+complete , LEAF: B1+complete , XOR( SEQ( SEQ( LEAF: D2+complete , LEAF: B2+complete ) , LEAF: C+complete , LEAF: F+complete ) , SEQ( LEAF: D+complete , LEAF: B2+complete , LEAF: C+complete , LEAF: E+complete
		String app2 = "XOR( SEQ( SEQ( LEAF: A+complete , AND( LEAF: C+complete , LEAF: D+complete , LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( SEQ( SEQ( LEAF: A+complete , LEAF: B1+complete ) , LEAF: B2+complete , LEAF: C+complete ) , LEAF: D2+complete , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) , SEQ( LEAF: A+complete , SEQ( LEAF: C+complete , XOR( LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) ) , SEQ( LEAF: A+complete , LEAF: B1+complete , AND( LEAF: B2+complete , LEAF: C+complete , XOR( LEAF: D2+complete , LEAF: B+complete ) ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete
		String app3 = "SEQ( SEQ( LEAF: A+complete , XOR( AND( LEAF: C+complete , LEAF: B+complete ) , XOR( SEQ( SEQ( SEQ( LEAF: B1+complete , LEAF: B2+complete ) , LEAF: C+complete ) , LEAF: D2+complete ) , SEQ( SEQ( LEAF: B1+complete , LEAF: D2+complete ) , LEAF: B2+complete , LEAF: C+complete ) ) , XOR( AND( LEAF: C+complete , LEAF: D+complete , LEAF: B+complete ) , SEQ( LEAF: B1+complete , SEQ( LEAF: D+complete , LEAF: B2+complete , LEAF: C+complete ) ) ) ) ) , XOR( SEQ( LEAF: F+complete , LEAF: G+complete ) , LEAF: F+complete , SEQ( LEAF: E+complete , XOR( LEAF: tau , LEAF: G+complete ) ) ) ) [[-, -, -, -, -, -, -, B, H, -, -, -, -, -, -, H, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, B, -, -, -, B, -][-, -, -, -, B, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, B, <, -, -, -, H, -, -, -, -, -, -, -, -, -, B, -, -, -, B, -][-, -, -, -, >, -, -, B, -, -, -, -, -, -, -, H, -, -, -, -, -, B, H, -, -, -, H, -, -, -, -, -, -, B, -, -, -, -, -, -, -, B][-, -, -, -, B, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, H, B] ]";
		String app4 = "SEQ( LEAF: A+complete , AND( LEAF: B1+complete , LEAF: D+complete , LEAF: B2+complete , LEAF: C+complete , LEAF: B+complete ) , XOR( LEAF: F+complete , LEAF: E+complete ) , LEAF: G+complete ) [[-, -, -, H, -, H, -, -, -, -, -, -][-, -, >, -, H, -, -, H, -, -, -, -][-, -, >, H, H, H, -, -, -, -, -, H][-, -, >, -, -, -, -, H, -, -, -, H] ]";
		String app4_imp = "LOOP( XOR( LEAF: F+complete , LOOP( XOR( OR( LEAF: B2+complete , LEAF: F+complete , SEQ( LEAF: C+complete , LEAF: D2+complete ) ) , LOOP( LOOP( OR( LEAF: A+complete , OR( LEAF: tau , LEAF: C+complete ) , LOOP( XOR( LEAF: D+complete , LOOP( LEAF: B+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LEAF: A+complete , LEAF: tau , LEAF: tau ) , LEAF: tau ) ) , LEAF: D+complete , OR( LOOP( LEAF: tau , LEAF: F+complete , LEAF: tau ) , LOOP( XOR( LOOP( LEAF: B+complete , LEAF: tau , LEAF: tau ) , OR( XOR( LOOP( LEAF: C+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: B+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LEAF: tau , LEAF: tau , LEAF: D+complete ) , LEAF: tau ) , LOOP( LEAF: C+complete , LOOP( LEAF: A+complete , LEAF: tau , LEAF: tau ) , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) ) , LEAF: B1+complete , LEAF: tau ) , LOOP( XOR( LEAF: F+complete , LEAF: B+complete , LOOP( LEAF: E+complete , LEAF: tau , LEAF: tau ) ) , LEAF: G+complete , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) [[-, -, B, -, -, B, -, -, -, -, -, -, -, -, -, B, B, -, -, -, -, -, -, B, -, B, -, -, -, -, -, x, B, -, -, -, -, -, -, -, B, -, >, -, -, -, B, -, >, -, -, -, >, -, -, -, -, -, -, B, -, -, -, -, -, -, B, -, >, x, -, B, >, -, -, -, -, -, -, -, B, -][-, -, B, -, -, -, -, -, -, -, -, >, -, -, -, B, -, -, B, -, -, -, -, H, -, B, -, -, -, -, B, x, -, -, B, -, B, -, -, -, -, -, -, -, -, -, B, -, >, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, >, x, B, B, -, -, B, -, H, -, B, -, H, -][-, -, B, -, -, B, -, -, -, -, -, -, -, >, -, -, B, -, -, -, B, -, -, B, -, B, -, -, -, -, B, -, -, -, -, -, B, -, -, -, B, -, -, -, -, -, B, -, B, -, -, -, H, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, B, B, -, -, B, -, B, -, H, -, B, -][-, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, B, -, B, -, B, -, -, H, -, B, -, -, -, -, B, H, >, -, B, -, -, -, -, -, H, -, B, -, -, -, H, -, B, -, -, -, >, -, -, -, -, -, -, B, -, -, -, -, -, -, B, -, -, -, B, -, >, -, -, -, B, -, B, -, -, -] ]";

		//Case study:
		String csApp3 = "XOR( LOOP( LEAF: 01_BB_650_2+complete , LEAF: 01_BB_650_1+complete , LEAF: tau ) , LEAF: 01_BB_550_1+complete , OR( LEAF: 01_BB_770+complete , XOR( OR( LEAF: 01_BB_765+complete , XOR( LEAF: 01_BB_630+complete , LEAF: 01_BB_540+complete ) ) , LOOP( LOOP( SEQ( XOR( XOR( LOOP( LEAF: 01_BB_540+complete , LEAF: 01_BB_775+complete , LEAF: tau ) , LEAF: tau ) , LOOP( LEAF: 01_BB_630+complete , SEQ( LEAF: 01_BB_670+complete , LEAF: 01_BB_640+complete , LEAF: 01_BB_700+complete ) , LEAF: tau ) ) , LEAF: 01_BB_730+complete ) , SEQ( LEAF: 01_BB_755+complete , LEAF: 01_BB_766+complete ) , LEAF: tau ) , OR( LEAF: 01_BB_590+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_560+complete ) ) , LEAF: tau ) ) ) , LOOP( LEAF: 01_BB_680+complete , LEAF: 01_BB_546+complete , LEAF: tau ) ) [[-, B, -, -, -, B, a, -, -, -, -, -, B, -, -, -, -, -, -, >, -, H, H, B, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -][-, B, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, >, -, -, H, -, -, -, B, -, -, -, -, -, -, -, H, H, a, -, -, -, -, -, -, -, -, -][-, B, -, -, -, B, -, -, -, -, B, -, -, -, -, >, -, -, -, -, -, H, H, B, -, -, B, -, -, -, -, -, -, -, H, H, B, -, -, -, -, -, B, -, -, -][-, B, -, -, -, B, -, -, -, -, -, -, -, -, -, >, -, -, -, >, -, H, H, B, -, -, B, -, -, -, -, -, H, -, H, H, a, -, -, -, -, -, B, -, -, -][-, B, -, -, -, B, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, H, B, -, -, -, -, -, -, -, H, -, -, -, H, -, -, -, -, -, -, B, -, -, -] ]";
		String csApp4 = "OR( LEAF: 01_BB_765+complete , OR( LEAF: 01_BB_770+complete , OR( LEAF: 01_BB_540+complete , SEQ( LEAF: 01_BB_630+complete , XOR( LEAF: tau , LEAF: 01_BB_730+complete ) ) ) ) ) [[-, B, a, -, x, -, -, -, -, B, -][-, -, -, -, -, -, -, -, -, -, -][-, B, -, -, x, -, -, -, -, H, -][-, -, -, -, -, -, -, -, -, H, -][-, -, -, -, -, -, -, -, -, H, -] ]";
		String csApp1 = "XOR( XOR( LOOP( LEAF: tau , LEAF: 01_BB_590+complete , LOOP( XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: tau , LEAF: tau ) ) , XOR( OR( SEQ( LEAF: 01_BB_740+complete , SEQ( LEAF: 01_BB_590+complete , LEAF: 01_BB_650_1+complete ) , OR( LEAF: 01_BB_670+complete , LEAF: 01_BB_730+complete ) ) , LOOP( LEAF: 01_BB_590+complete , LEAF: 01_BB_700+complete , LEAF: tau ) ) , LEAF: 01_BB_590+complete , OR( LEAF: 01_BB_540+complete , XOR( OR( LEAF: 01_BB_740+complete , LEAF: 01_BB_700+complete ) , LOOP( LOOP( LEAF: tau , XOR( LOOP( LEAF: 01_BB_540+complete , LEAF: tau , LEAF: tau ) , AND( LEAF: 01_BB_540+complete , LEAF: 01_BB_610+complete ) , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) , SEQ( LOOP( LEAF: 01_BB_546+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_550+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_550_1+complete , LOOP( LEAF: tau , LEAF: tau , LEAF: 01_BB_550_2+complete ) ) , AND( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_600+complete , XOR( LOOP( SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_610+complete , LEAF: 01_BB_630+complete ) ) , LEAF: tau ) , AND( LEAF: 01_BB_550_1+complete , OR( LEAF: 01_BB_546+complete , LOOP( LOOP( LEAF: 01_BB_550+complete , LEAF: 01_BB_590+complete , LEAF: tau ) , LOOP( LOOP( XOR( LEAF: 01_BB_550+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , LEAF: 01_BB_770+complete ) , LEAF: tau , LEAF: tau ) , SEQ( LEAF: 01_BB_740+complete , LEAF: 01_BB_766+complete ) , LEAF: tau ) , LEAF: tau ) ) ) , LEAF: 01_BB_740+complete ) ) ) ) ) , AND( LEAF: 01_BB_680+complete , XOR( SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) ) , LEAF: 01_BB_540+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) ) ) , XOR( LEAF: 01_BB_550+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , LEAF: 01_BB_770+complete ) , XOR( LOOP( LEAF: 01_BB_540+complete , LEAF: tau , LEAF: tau ) , AND( LEAF: 01_BB_540+complete , LEAF: 01_BB_610+complete ) , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) , SEQ( LOOP( LEAF: 01_BB_546+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_550+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_550_1+complete , LOOP( LEAF: tau , LEAF: tau , LEAF: 01_BB_550_2+complete ) ) , AND( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_600+complete , XOR( LOOP( SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_610+complete , LEAF: 01_BB_630+complete ) ) , OR( XOR( LOOP( SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_610+complete , LEAF: 01_BB_630+complete ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete
		String csApp2 = "XOR( LOOP( XOR( OR( LEAF: 0 , SEQ( LEAF: 1 , LOOP( LEAF: 2 , LEAF: 3 , LEAF: 2 ) ) ) , LOOP( LEAF: 4 , LOOP( XOR( LEAF: 5 , LEAF: 6 , SEQ( LEAF: 7 , LOOP( XOR( LEAF: 8 , LEAF: 9 ) , LEAF: 10 , LEAF: 2 ) ) ) , LEAF: 2 , LEAF: 2 ) , LOOP( XOR( LEAF: 11 , LOOP( XOR( LEAF: 12 , LEAF: 13 , LEAF: 14 ) , LEAF: 2 , LEAF: 2 ) ) , LEAF: 15 , LEAF: 2 ) ) , XOR( SEQ( LEAF: 4 , LEAF: 1 ) , LOOP( LEAF: 1 , LEAF: 16 , LEAF: 2 ) ) ) , XOR( LEAF: 2 , LOOP( LEAF: 17 , OR( LOOP( LEAF: 18 , LEAF: 19 , LEAF: 20 ) , LEAF: 21 , OR( LEAF: 22 , LEAF: 23 , LEAF: 2 ) ) , LEAF: 2 ) ) , XOR( LEAF: 1 , LEAF: 2 ) ) , LOOP( XOR( LEAF: 1 , OR( LEAF: 0 , XOR( LOOP( LEAF: 2 , LEAF: 8 , LEAF: 3 ) , LEAF: 1 ) ) , LOOP( LEAF: 4 , SEQ( LEAF: 9 , AND( LEAF: 5 , LEAF: 7 ) ) , XOR( LEAF: 2 , SEQ( SEQ( LEAF: 17 , LEAF: 13 ) , LEAF: 6 , LEAF: 3 ) , LEAF: 11 , LEAF: 19 ) ) ) , LOOP( LEAF: 2 , LEAF: 10 , LEAF: 2 ) , LEAF: 2 ) , LOOP( XOR( OR( LEAF: 0 , LEAF: 1 ) , LEAF: 1 , LOOP( LEAF: 4 , SEQ( LEAF: 21 , LEAF: 16 , LEAF: 24 ) , XOR( LEAF: 11 , LEAF: 2 ) ) ) , LOOP( LEAF: 2 , LEAF: 3 , LEAF: 2 ) , LOOP( LEAF: 2 , LEAF: 13 , LEAF: 2 ) ) , LOOP( XOR( OR( LEAF: 0 , LOOP( XOR( LOOP( LEAF: 1 , LEAF: 17 , LEAF: 2 ) , SEQ( LEAF: 3 , XOR( XOR( SEQ( LEAF: 4 , LEAF: 11 , LEAF: 13 ) , SEQ( LEAF: 6 , LEAF: 16 , LEAF: 18 , LEAF: 8 , LEAF: 22 , LEAF: 21 , LEAF: 24 , LEAF: 19 , LEAF: 12 , LEAF: 14 ) ) , LEAF: 2 ) ) ) , LEAF: 2 , LEAF: 2 ) ) , SEQ( LEAF: 4 , XOR( LEAF: 11 , LEAF: 2 ) ) ) , LOOP( LEAF: 2 , LEAF: 20 , AND( LEAF: 5 , LEAF: 7 , LEAF: 9 ) ) , XOR( LEAF: 1 , LEAF: 2 ) ) , LOOP( XOR( LOOP( LEAF: 4 , LEAF: 12 , LOOP( XOR( XOR( XOR( LEAF: 1 , LEAF: 3 ) , LEAF: 10 ) , LEAF: 11 ) , LEAF: 2 , LEAF: 2 ) ) , XOR( SEQ( LEAF: 4 , LOOP( XOR( LEAF: 9 , LOOP( XOR( LEAF: 5 , LEAF: 7 , LOOP( XOR( XOR( LEAF: 18 , LEAF: 14 , OR( LEAF: 21 , SEQ( LEAF: 19 , LEAF: 25 , LEAF: 20 ) ) ) , LOOP( XOR( LEAF: 26 , LEAF: 15 , XOR( LEAF: 4 , LEAF: 1 , XOR( LEAF: 23 , LEAF: 27 , LEAF: 28 ) ) ) , LEAF: 2 , LEAF: 2 ) ) , LEAF: 11 , LEAF: 2 ) ) , LOOP( LEAF: 22 , LEAF: 16 , LEAF: 2 ) , LEAF: 2 ) ) , LEAF: 2 , LEAF: 2 ) ) , OR( LEAF: 0 , XOR( LEAF: 1 , LEAF: 3 ) ) ) ) , LOOP( LEAF: 2 , LEAF: 13 , LEAF: 2 ) , LEAF: 2 ) ) [[-, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -][-, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -][-, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -][-, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -][-, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -, -] ]";
		String csApp4_imp = "LOOP( XOR( LOOP( LEAF: 01_BB_630+complete , LOOP( XOR( LOOP( LEAF: 01_BB_680+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_780_2+complete , LEAF: 01_BB_780_1+complete , LOOP( XOR( LEAF: 01_BB_790+complete , LEAF: 01_BB_670+complete , LEAF: 01_BB_780_3+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_650_2+complete , LEAF: 01_BB_640+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) , LEAF: tau ) , LOOP( XOR( LOOP( XOR( LOOP( LEAF: 01_BB_630+complete , LEAF: tau , LEAF: tau ) , LOOP( XOR( LOOP( LEAF: 01_BB_755+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_730+complete , LEAF: tau , LEAF: tau ) , LOOP( XOR( LEAF: 01_BB_610+complete , OR( LEAF: 01_BB_760+complete , LEAF: tau ) , LEAF: 01_BB_775+complete , OR( LOOP( LEAF: 01_BB_700+complete , LEAF: tau , LEAF: tau ) , LEAF: tau ) , OR( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_2+complete ) , LOOP( XOR( LEAF: 01_BB_740+complete , LEAF: 01_BB_766+complete , LEAF: 01_BB_550+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_770+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_540+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: tau , LOOP( XOR( LEAF: tau , LOOP( LEAF: 01_BB_770+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LEAF: 01_BB_765+complete , LEAF: tau , LEAF: tau ) , LEAF: tau ) ) [[-, -, B, -, >, -, -, -, -, -, -, -, H, -, -, -, -, B, -, -, -, -, -, -, -, >, -, >, -, -, -, B, -, -, -, >, -, -, -, >, -, -, -, >, -, B, >, -, -, B, B, -, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, -, -, B, -, -, -, -, H, -, -, -, -, -, B, -, -, -, B, -, -][>, -, >, -, -, -, -, -, -, -, -, B, >, -, B, -, B, B, B, -, -, -, -, -, -, -, -, >, -, -, -, B, -, >, -, >, -, -, -, -, -, B, -, -, -, B, B, -, -, -, B, -, -, -, -, -, -, B, B, -, B, -, -, B, B, -, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, >, -, -, -, -][>, -, >, -, >, -, -, -, -, -, -, B, -, -, B, -, B, -, -, -, -, -, -, -, -, -, -, >, -, -, -, B, -, >, -, -, -, -, -, >, -, -, -, B, -, B, <, -, -, H, -, -, -, -, -, -, -, H, -, -, B, -, -, B, H, -, B, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, B, -, -][-, -, -, -, B, -, -, -, -, -, -, B, >, -, B, -, B, -, B, -, -, -, -, -, -, -, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, B, -, -, -, B, B, -, -, B, B, -, -, -, -, -, -, B, B, -, B, -, -, B, B, -, B, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, -, B, -, -, -, >, -, -, -, -, -, B, -, -][-, -, >, -, -, -, -, -, -, -, -, -, >, -, -, -, -, B, B, -, -, -, -, -, -, >, -, -, -, -, -, B, -, >, -, >, -, -, -, >, -, -, -, >, -, -, a, -, -, -, <, -, -, -, -, -, -, -, B, -, B, -, -, -, -, -, B, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, -, -, -, -, -, >, -, -, -, -, -, B, -, -] ]  0.9885 (Pe: 0.8693 Of: 0.9889 Cf: 0.6354 Fr: 0.9997 Gv: 0.4676 Sm: 0.9996 )";
		String test = "XOR( LEAF: 0 , LEAF: 1) ";

		String treeStr = csApp4_imp;

		NAryTree tree = TreeUtils.fromString(treeStr, mergedLogInfo.getEventClasses());

		/*-
		System.out.println(String.format("CONFIG Tree size %d   %s", tree.size(),
				TreeUtils.toString(tree, mergedLogInfo.getEventClasses())));
				/**/

		System.out.println(String.format("& & %d & !!! & - ", tree.size()));

		EditDistanceWrapperRTEDRelative ed = new EditDistanceWrapperRTEDRelative(tree);

		for (int c = 0; c < tree.getNumberOfConfigurations(); c++) {
			int nrConfSet = 0;
			for (int i = 0; i < tree.size(); i++) {
				if (tree.getNodeConfiguration(c, i) != Configuration.NOTCONFIGURED) {
					nrConfSet++;
				}
			}

			NAryTree treeIndividual = tree.applyConfiguration(c);

			int size = treeIndividual.size();

			double similarity = 1 - ed.getFitness(treeIndividual, null);

			System.out.println(String.format("& & %d & %d & %2.3f", size, nrConfSet, similarity));

			/*-
			System.out.println(String.format("Tree %d size %d similarity %2.3f   %s", c, size, similarity,
					TreeUtils.toString(treeIndividual, mergedLogInfo.getEventClasses())));
			System.out.println(ed.getLastBestDist() + " edits");
			/**/
			//TreeUtils.printTree(treeIndividual);
		}
	}

	/**
	 * Since BLUE and RED (approaches 1 and 2) currently result in a merged
	 * model of a XOR with each subtree blocked per log, this method takes an
	 * unconfigured tree and applies the configurations and outputs the new
	 * string.
	 */
	public static void applyBlockToRootXorChildren() {
		//String treeStr = "XOR( XOR( LOOP( LEAF: tau , LEAF: 01_BB_590+complete , LOOP( XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: tau , LEAF: tau ) ) , XOR( OR( SEQ( LEAF: 01_BB_740+complete , SEQ( LEAF: 01_BB_590+complete , LEAF: 01_BB_650_1+complete ) , OR( LEAF: 01_BB_670+complete , LEAF: 01_BB_730+complete ) ) , LOOP( LEAF: 01_BB_590+complete , LEAF: 01_BB_700+complete , LEAF: tau ) ) , LEAF: 01_BB_590+complete , OR( LEAF: 01_BB_540+complete , XOR( OR( LEAF: 01_BB_740+complete , LEAF: 01_BB_700+complete ) , LOOP( LOOP( LEAF: tau , XOR( LOOP( LEAF: 01_BB_540+complete , LEAF: tau , LEAF: tau ) , AND( LEAF: 01_BB_540+complete , LEAF: 01_BB_610+complete ) , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) , SEQ( LOOP( LEAF: 01_BB_546+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_550+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_550_1+complete , LOOP( LEAF: tau , LEAF: tau , LEAF: 01_BB_550_2+complete ) ) , AND( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_600+complete , XOR( LOOP( SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_610+complete , LEAF: 01_BB_630+complete ) ) , LEAF: tau ) , AND( LEAF: 01_BB_550_1+complete , OR( LEAF: 01_BB_546+complete , LOOP( LOOP( LEAF: 01_BB_550+complete , LEAF: 01_BB_590+complete , LEAF: tau ) , LOOP( LOOP( XOR( LEAF: 01_BB_550+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , LEAF: 01_BB_770+complete ) , LEAF: tau , LEAF: tau ) , SEQ( LEAF: 01_BB_740+complete , LEAF: 01_BB_766+complete ) , LEAF: tau ) , LEAF: tau ) ) ) , LEAF: 01_BB_740+complete ) ) ) ) ) , AND( LEAF: 01_BB_680+complete , XOR( SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) ) , LEAF: 01_BB_540+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) ) ) , XOR( LEAF: 01_BB_550+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , LEAF: 01_BB_770+complete ) , XOR( LOOP( LEAF: 01_BB_540+complete , LEAF: tau , LEAF: tau ) , AND( LEAF: 01_BB_540+complete , LEAF: 01_BB_610+complete ) , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) , SEQ( LOOP( LEAF: 01_BB_546+complete , LEAF: tau , LEAF: tau ) , LOOP( LEAF: 01_BB_550+complete , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_550_1+complete , LOOP( LEAF: tau , LEAF: tau , LEAF: 01_BB_550_2+complete ) ) , AND( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_600+complete , XOR( LOOP( SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_610+complete , LEAF: 01_BB_630+complete ) ) , OR( XOR( LOOP( SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete , XOR( SEQ( LEAF: 01_BB_546+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LEAF: 01_BB_590+complete , LEAF: 01_BB_550_1+complete , XOR( LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) , LEAF: 01_BB_560+complete ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , LEAF: 01_BB_630+complete , LEAF: 01_BB_640+complete , XOR( LEAF: 01_BB_670+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_670+complete ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_650_2+complete , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) , LOOP( LOOP( XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_760+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_610+complete , LEAF: 01_BB_630+complete ) , OR( LEAF: 01_BB_540+complete , XOR( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_610+complete , LOOP( LEAF: tau , XOR( LEAF: 01_BB_546+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_650_2+complete , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_610+complete , SEQ( LEAF: 01_BB_540+complete , LEAF: 01_BB_600+complete ) ) , SEQ( LEAF: 01_BB_600+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_610+complete ) , SEQ( LEAF: 01_BB_550+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_546+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_560+complete , XOR( LEAF: 01_BB_630+complete , LEAF: tau , LOOP( LEAF: 01_BB_610+complete , LEAF: tau , LEAF: tau ) ) ) , LOOP( LEAF: tau , LOOP( XOR( LEAF: 01_BB_680+complete , LEAF: 01_BB_755+complete ) , LEAF: tau , LEAF: tau ) , LEAF: 01_BB_650_1+complete ) , LEAF: 01_BB_765+complete ) , LEAF: tau ) ) ) , LEAF: 01_BB_640+complete ) , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_550_2+complete ) ) ) [ ]";
		//RED 2013-05-30_08_40 session 1 ngrid07
		String treeStr = "XOR( LOOP( XOR( OR( LEAF: 01_BB_540+complete , SEQ( LEAF: 01_BB_770+complete , LOOP( LEAF: tau , LEAF: 01_BB_765+complete , LEAF: tau ) ) ) , LOOP( LEAF: 01_BB_630+complete , LOOP( XOR( LEAF: 01_BB_560+complete , LEAF: 01_BB_550_2+complete , SEQ( LEAF: 01_BB_590+complete , LOOP( XOR( LEAF: 01_BB_550_1+complete , LEAF: 01_BB_550+complete ) , LEAF: 01_BB_775+complete , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) , LOOP( XOR( LEAF: 01_BB_730+complete , LOOP( XOR( LEAF: 01_BB_766+complete , LEAF: 01_BB_755+complete , LEAF: 01_BB_760+complete ) , LEAF: tau , LEAF: tau ) ) , LEAF: 01_BB_740+complete , LEAF: tau ) ) , XOR( SEQ( LEAF: 01_BB_630+complete , LEAF: 01_BB_770+complete ) , LOOP( LEAF: 01_BB_770+complete , LEAF: 01_BB_650_1+complete , LEAF: tau ) ) ) , XOR( LEAF: tau , LOOP( LEAF: 01_BB_546+complete , OR( LOOP( LEAF: 01_BB_610+complete , LEAF: 01_BB_670+complete , LEAF: 01_BB_700+complete ) , LEAF: 01_BB_640+complete , OR( LEAF: 01_BB_600+complete , LEAF: 01_BB_780_3+complete , LEAF: tau ) ) , LEAF: tau ) ) , XOR( LEAF: 01_BB_770+complete , LEAF: tau ) ) , LOOP( XOR( LEAF: 01_BB_770+complete , OR( LEAF: 01_BB_540+complete , XOR( LOOP( LEAF: tau , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_765+complete ) , LEAF: 01_BB_770+complete ) ) , LOOP( LEAF: 01_BB_630+complete , SEQ( LEAF: 01_BB_550+complete , AND( LEAF: 01_BB_560+complete , LEAF: 01_BB_590+complete ) ) , XOR( LEAF: tau , SEQ( SEQ( LEAF: 01_BB_546+complete , LEAF: 01_BB_755+complete ) , LEAF: 01_BB_550_2+complete , LEAF: 01_BB_765+complete ) , LEAF: 01_BB_730+complete , LEAF: 01_BB_670+complete ) ) ) , LOOP( LEAF: tau , LEAF: 01_BB_775+complete , LEAF: tau ) , LEAF: tau ) , LOOP( XOR( OR( LEAF: 01_BB_540+complete , LEAF: 01_BB_770+complete ) , LEAF: 01_BB_770+complete , LOOP( LEAF: 01_BB_630+complete , SEQ( LEAF: 01_BB_640+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_650_2+complete ) , XOR( LEAF: 01_BB_730+complete , LEAF: tau ) ) ) , LOOP( LEAF: tau , LEAF: 01_BB_765+complete , LEAF: tau ) , LOOP( LEAF: tau , LEAF: 01_BB_755+complete , LEAF: tau ) ) , LOOP( XOR( OR( LEAF: 01_BB_540+complete , LOOP( XOR( LOOP( LEAF: 01_BB_770+complete , LEAF: 01_BB_546+complete , LEAF: tau ) , SEQ( LEAF: 01_BB_765+complete , XOR( XOR( SEQ( LEAF: 01_BB_630+complete , LEAF: 01_BB_730+complete , LEAF: 01_BB_755+complete ) , SEQ( LEAF: 01_BB_550_2+complete , LEAF: 01_BB_650_1+complete , LEAF: 01_BB_610+complete , LEAF: 01_BB_550_1+complete , LEAF: 01_BB_600+complete , LEAF: 01_BB_640+complete , LEAF: 01_BB_650_2+complete , LEAF: 01_BB_670+complete , LEAF: 01_BB_766+complete , LEAF: 01_BB_760+complete ) ) , LEAF: tau ) ) ) , LEAF: tau , LEAF: tau ) ) , SEQ( LEAF: 01_BB_630+complete , XOR( LEAF: 01_BB_730+complete , LEAF: tau ) ) ) , LOOP( LEAF: tau , LEAF: 01_BB_700+complete , AND( LEAF: 01_BB_560+complete , LEAF: 01_BB_590+complete , LEAF: 01_BB_550+complete ) ) , XOR( LEAF: 01_BB_770+complete , LEAF: tau ) ) , LOOP( XOR( LOOP( LEAF: 01_BB_630+complete , LEAF: 01_BB_766+complete , LOOP( XOR( XOR( XOR( LEAF: 01_BB_770+complete , LEAF: 01_BB_765+complete ) , LEAF: 01_BB_775+complete ) , LEAF: 01_BB_730+complete ) , LEAF: tau , LEAF: tau ) ) , XOR( SEQ( LEAF: 01_BB_630+complete , LOOP( XOR( LEAF: 01_BB_550+complete , LOOP( XOR( LEAF: 01_BB_560+complete , LEAF: 01_BB_590+complete , LOOP( XOR( XOR( LEAF: 01_BB_610+complete , LEAF: 01_BB_760+complete , OR( LEAF: 01_BB_640+complete , SEQ( LEAF: 01_BB_670+complete , LEAF: 01_BB_680+complete , LEAF: 01_BB_700+complete ) ) ) , LOOP( XOR( LEAF: 01_BB_780_2+complete , LEAF: 01_BB_740+complete , XOR( LEAF: 01_BB_630+complete , LEAF: 01_BB_770+complete , XOR( LEAF: 01_BB_780_3+complete , LEAF: 01_BB_780_1+complete , LEAF: 01_BB_790+complete ) ) ) , LEAF: tau , LEAF: tau ) ) , LEAF: 01_BB_730+complete , LEAF: tau ) ) , LOOP( LEAF: 01_BB_600+complete , LEAF: 01_BB_650_1+complete , LEAF: tau ) , LEAF: tau ) ) , LEAF: tau , LEAF: tau ) ) , OR( LEAF: 01_BB_540+complete , XOR( LEAF: 01_BB_770+complete , LEAF: 01_BB_765+complete ) ) ) ) , LOOP( LEAF: tau , LEAF: 01_BB_755+complete , LEAF: tau ) , LEAF: tau ) )";

		NAryTree tree = TreeUtils.fromString(treeStr);

		//Add configurations
		for (int c = 0; c < tree.nChildren(0); c++) {
			//Build configuration
			tree.addConfiguration(new Configuration(tree.size()));
		}

		//For each child of the root
		for (int c = 0; c < tree.nChildren(0); c++) {
			//Block for al configurations except child index :)
			for (int i = 0; i < tree.nChildren(0); i++) {
				if (i != c) {
					int childIndex = tree.getChildAtIndex(0, c);
					tree.setNodeConfiguration(i, childIndex, Configuration.BLOCKED);
				}
			}
		}

		System.out.println(TreeUtils.toString(tree));
	}

	public static NAryTree[] getBPM13RunningExampleTreeVariants(XEventClasses eventclasses) {
		String tree1 = "SEQ( LEAF: A+complete , AND( LEAF: B+complete , LEAF: C+complete , XOR( LEAF: tau , LEAF: D+complete ) ) , "
				+ "XOR( LEAF: E+complete , LEAF: F+complete ) , LEAF: G+complete ) ";
		String tree2 = "SEQ( LEAF: A+complete , LEAF: B1+complete , LEAF: B2+complete "
				+ ", LEAF: C+complete , LEAF: D2+complete , XOR( LEAF: E+complete , "
				+ "LEAF: F+complete ) , LEAF: G+complete ) ";
		String tree3 = "SEQ( LEAF: A+complete , LEAF: C+complete , LEAF: B+complete , XOR( LEAF: E+complete , "
				+ "LEAF: F+complete ) ) ";
		String tree4 = "SEQ( LEAF: A+complete , LEAF: B1+complete "
				+ ", XOR( LEAF: D+complete , LEAF: D2+complete ) , LEAF: B2+complete , LEAF: C+complete , XOR( LEAF: E+complete , "
				+ "LEAF: F+complete ) ) ";

		NAryTree[] trees = new NAryTree[4];

		trees[0] = TreeUtils.fromString(tree1, eventclasses);
		trees[1] = TreeUtils.fromString(tree2, eventclasses);
		trees[2] = TreeUtils.fromString(tree3, eventclasses);
		trees[3] = TreeUtils.fromString(tree4, eventclasses);

		return trees;
	}

}
